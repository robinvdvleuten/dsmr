package dsmr

// Code generated by peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleTelegram
	ruleHeader
	ruleCOSEM
	ruleFooter
	ruleOBIS
	ruleAttribute
	ruleMeasurement
	ruleText
	ruleTimestamp
	ruleNumber
	ruleEOL
	ruleEOF
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"Telegram",
	"Header",
	"COSEM",
	"Footer",
	"OBIS",
	"Attribute",
	"Measurement",
	"Text",
	"Timestamp",
	"Number",
	"EOL",
	"EOF",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	t *Telegram
	o *OBIS
	c *COSEM
	a Attribute

	Buffer string
	buffer []rune
	rules  [24]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.t.Header = text
		case ruleAction1:

			p.c = &COSEM{OBIS: p.o}
			p.a = nil

		case ruleAction2:

			p.t.COSEM = append(p.t.COSEM, p.c)

		case ruleAction3:
			p.t.Checksum = text
		case ruleAction4:
			p.o = &OBIS{Value: text}
		case ruleAction5:

			if p.a != nil {
				p.c.Attribute = append(p.c.Attribute, p.a)
			}

		case ruleAction6:

			p.a = &Measurement{Value: text}

		case ruleAction7:

			p.a.(*Measurement).Unit = text

		case ruleAction8:
			p.a = &Text{Value: text}
		case ruleAction9:
			p.a = &Timestamp{Value: text}

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Telegram <- <(Header EOL COSEM+ Footer EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						position3 := position
						if buffer[position] != rune('/') {
							goto l0
						}
						position++
						{
							position6, tokenIndex6 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l6
							}
							goto l0
						l6:
							position, tokenIndex = position6, tokenIndex6
						}
						if !matchDot() {
							goto l0
						}
					l4:
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7, tokenIndex7 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l7
								}
								goto l5
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							if !matchDot() {
								goto l5
							}
							goto l4
						l5:
							position, tokenIndex = position5, tokenIndex5
						}
						add(rulePegText, position3)
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
					{
						add(ruleAction0, position)
					}
					add(ruleHeader, position2)
				}
				if !_rules[ruleEOL]() {
					goto l0
				}
				{
					position11 := position
					{
						position12 := position
						{
							position13 := position
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('-') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune(':') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('.') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('.') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							add(rulePegText, position13)
						}
						{
							add(ruleAction4, position)
						}
						add(ruleOBIS, position12)
					}
					{
						add(ruleAction1, position)
					}
					{
						position18 := position
						if buffer[position] != rune('(') {
							goto l0
						}
						position++
					l19:
						{
							position20, tokenIndex20 := position, tokenIndex
							{
								position21, tokenIndex21 := position, tokenIndex
								{
									position23 := position
									{
										position24 := position
										{
											position27, tokenIndex27 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l28
											}
											goto l27
										l28:
											position, tokenIndex = position27, tokenIndex27
											if buffer[position] != rune('.') {
												goto l22
											}
											position++
										}
									l27:
									l25:
										{
											position26, tokenIndex26 := position, tokenIndex
											{
												position29, tokenIndex29 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l30
												}
												goto l29
											l30:
												position, tokenIndex = position29, tokenIndex29
												if buffer[position] != rune('.') {
													goto l26
												}
												position++
											}
										l29:
											goto l25
										l26:
											position, tokenIndex = position26, tokenIndex26
										}
										add(rulePegText, position24)
									}
									if buffer[position] != rune('*') {
										goto l22
									}
									position++
									{
										add(ruleAction6, position)
									}
									{
										position32 := position
										{
											position35, tokenIndex35 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l35
											}
											position++
											goto l22
										l35:
											position, tokenIndex = position35, tokenIndex35
										}
										if !matchDot() {
											goto l22
										}
									l33:
										{
											position34, tokenIndex34 := position, tokenIndex
											{
												position36, tokenIndex36 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l36
												}
												position++
												goto l34
											l36:
												position, tokenIndex = position36, tokenIndex36
											}
											if !matchDot() {
												goto l34
											}
											goto l33
										l34:
											position, tokenIndex = position34, tokenIndex34
										}
										add(rulePegText, position32)
									}
									{
										add(ruleAction7, position)
									}
									add(ruleMeasurement, position23)
								}
								goto l21
							l22:
								position, tokenIndex = position21, tokenIndex21
								{
									position39 := position
									{
										position40 := position
										if !_rules[ruleNumber]() {
											goto l38
										}
										{
											position41, tokenIndex41 := position, tokenIndex
											if buffer[position] != rune('S') {
												goto l42
											}
											position++
											goto l41
										l42:
											position, tokenIndex = position41, tokenIndex41
											if buffer[position] != rune('W') {
												goto l38
											}
											position++
										}
									l41:
										add(rulePegText, position40)
									}
									{
										add(ruleAction9, position)
									}
									add(ruleTimestamp, position39)
								}
								goto l21
							l38:
								position, tokenIndex = position21, tokenIndex21
								{
									position44 := position
									{
										position45 := position
										{
											position48, tokenIndex48 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l48
											}
											position++
											goto l20
										l48:
											position, tokenIndex = position48, tokenIndex48
										}
										if !matchDot() {
											goto l20
										}
									l46:
										{
											position47, tokenIndex47 := position, tokenIndex
											{
												position49, tokenIndex49 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l49
												}
												position++
												goto l47
											l49:
												position, tokenIndex = position49, tokenIndex49
											}
											if !matchDot() {
												goto l47
											}
											goto l46
										l47:
											position, tokenIndex = position47, tokenIndex47
										}
										add(rulePegText, position45)
									}
									{
										add(ruleAction8, position)
									}
									add(ruleText, position44)
								}
							}
						l21:
							goto l19
						l20:
							position, tokenIndex = position20, tokenIndex20
						}
						if buffer[position] != rune(')') {
							goto l0
						}
						position++
						{
							position51, tokenIndex51 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l51
							}
							goto l52
						l51:
							position, tokenIndex = position51, tokenIndex51
						}
					l52:
						{
							add(ruleAction5, position)
						}
						add(ruleAttribute, position18)
					}
				l16:
					{
						position17, tokenIndex17 := position, tokenIndex
						{
							position54 := position
							if buffer[position] != rune('(') {
								goto l17
							}
							position++
						l55:
							{
								position56, tokenIndex56 := position, tokenIndex
								{
									position57, tokenIndex57 := position, tokenIndex
									{
										position59 := position
										{
											position60 := position
											{
												position63, tokenIndex63 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l64
												}
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('.') {
													goto l58
												}
												position++
											}
										l63:
										l61:
											{
												position62, tokenIndex62 := position, tokenIndex
												{
													position65, tokenIndex65 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l66
													}
													goto l65
												l66:
													position, tokenIndex = position65, tokenIndex65
													if buffer[position] != rune('.') {
														goto l62
													}
													position++
												}
											l65:
												goto l61
											l62:
												position, tokenIndex = position62, tokenIndex62
											}
											add(rulePegText, position60)
										}
										if buffer[position] != rune('*') {
											goto l58
										}
										position++
										{
											add(ruleAction6, position)
										}
										{
											position68 := position
											{
												position71, tokenIndex71 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l71
												}
												position++
												goto l58
											l71:
												position, tokenIndex = position71, tokenIndex71
											}
											if !matchDot() {
												goto l58
											}
										l69:
											{
												position70, tokenIndex70 := position, tokenIndex
												{
													position72, tokenIndex72 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l72
													}
													position++
													goto l70
												l72:
													position, tokenIndex = position72, tokenIndex72
												}
												if !matchDot() {
													goto l70
												}
												goto l69
											l70:
												position, tokenIndex = position70, tokenIndex70
											}
											add(rulePegText, position68)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleMeasurement, position59)
									}
									goto l57
								l58:
									position, tokenIndex = position57, tokenIndex57
									{
										position75 := position
										{
											position76 := position
											if !_rules[ruleNumber]() {
												goto l74
											}
											{
												position77, tokenIndex77 := position, tokenIndex
												if buffer[position] != rune('S') {
													goto l78
												}
												position++
												goto l77
											l78:
												position, tokenIndex = position77, tokenIndex77
												if buffer[position] != rune('W') {
													goto l74
												}
												position++
											}
										l77:
											add(rulePegText, position76)
										}
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position75)
									}
									goto l57
								l74:
									position, tokenIndex = position57, tokenIndex57
									{
										position80 := position
										{
											position81 := position
											{
												position84, tokenIndex84 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l84
												}
												position++
												goto l56
											l84:
												position, tokenIndex = position84, tokenIndex84
											}
											if !matchDot() {
												goto l56
											}
										l82:
											{
												position83, tokenIndex83 := position, tokenIndex
												{
													position85, tokenIndex85 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l85
													}
													position++
													goto l83
												l85:
													position, tokenIndex = position85, tokenIndex85
												}
												if !matchDot() {
													goto l83
												}
												goto l82
											l83:
												position, tokenIndex = position83, tokenIndex83
											}
											add(rulePegText, position81)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position80)
									}
								}
							l57:
								goto l55
							l56:
								position, tokenIndex = position56, tokenIndex56
							}
							if buffer[position] != rune(')') {
								goto l17
							}
							position++
							{
								position87, tokenIndex87 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l87
								}
								goto l88
							l87:
								position, tokenIndex = position87, tokenIndex87
							}
						l88:
							{
								add(ruleAction5, position)
							}
							add(ruleAttribute, position54)
						}
						goto l16
					l17:
						position, tokenIndex = position17, tokenIndex17
					}
					{
						add(ruleAction2, position)
					}
					add(ruleCOSEM, position11)
				}
			l9:
				{
					position10, tokenIndex10 := position, tokenIndex
					{
						position91 := position
						{
							position92 := position
							{
								position93 := position
								if !_rules[ruleNumber]() {
									goto l10
								}
								if buffer[position] != rune('-') {
									goto l10
								}
								position++
								if !_rules[ruleNumber]() {
									goto l10
								}
								if buffer[position] != rune(':') {
									goto l10
								}
								position++
								if !_rules[ruleNumber]() {
									goto l10
								}
								if buffer[position] != rune('.') {
									goto l10
								}
								position++
								if !_rules[ruleNumber]() {
									goto l10
								}
								if buffer[position] != rune('.') {
									goto l10
								}
								position++
								if !_rules[ruleNumber]() {
									goto l10
								}
								add(rulePegText, position93)
							}
							{
								add(ruleAction4, position)
							}
							add(ruleOBIS, position92)
						}
						{
							add(ruleAction1, position)
						}
						{
							position98 := position
							if buffer[position] != rune('(') {
								goto l10
							}
							position++
						l99:
							{
								position100, tokenIndex100 := position, tokenIndex
								{
									position101, tokenIndex101 := position, tokenIndex
									{
										position103 := position
										{
											position104 := position
											{
												position107, tokenIndex107 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l108
												}
												goto l107
											l108:
												position, tokenIndex = position107, tokenIndex107
												if buffer[position] != rune('.') {
													goto l102
												}
												position++
											}
										l107:
										l105:
											{
												position106, tokenIndex106 := position, tokenIndex
												{
													position109, tokenIndex109 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l110
													}
													goto l109
												l110:
													position, tokenIndex = position109, tokenIndex109
													if buffer[position] != rune('.') {
														goto l106
													}
													position++
												}
											l109:
												goto l105
											l106:
												position, tokenIndex = position106, tokenIndex106
											}
											add(rulePegText, position104)
										}
										if buffer[position] != rune('*') {
											goto l102
										}
										position++
										{
											add(ruleAction6, position)
										}
										{
											position112 := position
											{
												position115, tokenIndex115 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l115
												}
												position++
												goto l102
											l115:
												position, tokenIndex = position115, tokenIndex115
											}
											if !matchDot() {
												goto l102
											}
										l113:
											{
												position114, tokenIndex114 := position, tokenIndex
												{
													position116, tokenIndex116 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l116
													}
													position++
													goto l114
												l116:
													position, tokenIndex = position116, tokenIndex116
												}
												if !matchDot() {
													goto l114
												}
												goto l113
											l114:
												position, tokenIndex = position114, tokenIndex114
											}
											add(rulePegText, position112)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleMeasurement, position103)
									}
									goto l101
								l102:
									position, tokenIndex = position101, tokenIndex101
									{
										position119 := position
										{
											position120 := position
											if !_rules[ruleNumber]() {
												goto l118
											}
											{
												position121, tokenIndex121 := position, tokenIndex
												if buffer[position] != rune('S') {
													goto l122
												}
												position++
												goto l121
											l122:
												position, tokenIndex = position121, tokenIndex121
												if buffer[position] != rune('W') {
													goto l118
												}
												position++
											}
										l121:
											add(rulePegText, position120)
										}
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position119)
									}
									goto l101
								l118:
									position, tokenIndex = position101, tokenIndex101
									{
										position124 := position
										{
											position125 := position
											{
												position128, tokenIndex128 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l128
												}
												position++
												goto l100
											l128:
												position, tokenIndex = position128, tokenIndex128
											}
											if !matchDot() {
												goto l100
											}
										l126:
											{
												position127, tokenIndex127 := position, tokenIndex
												{
													position129, tokenIndex129 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l129
													}
													position++
													goto l127
												l129:
													position, tokenIndex = position129, tokenIndex129
												}
												if !matchDot() {
													goto l127
												}
												goto l126
											l127:
												position, tokenIndex = position127, tokenIndex127
											}
											add(rulePegText, position125)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position124)
									}
								}
							l101:
								goto l99
							l100:
								position, tokenIndex = position100, tokenIndex100
							}
							if buffer[position] != rune(')') {
								goto l10
							}
							position++
							{
								position131, tokenIndex131 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l131
								}
								goto l132
							l131:
								position, tokenIndex = position131, tokenIndex131
							}
						l132:
							{
								add(ruleAction5, position)
							}
							add(ruleAttribute, position98)
						}
					l96:
						{
							position97, tokenIndex97 := position, tokenIndex
							{
								position134 := position
								if buffer[position] != rune('(') {
									goto l97
								}
								position++
							l135:
								{
									position136, tokenIndex136 := position, tokenIndex
									{
										position137, tokenIndex137 := position, tokenIndex
										{
											position139 := position
											{
												position140 := position
												{
													position143, tokenIndex143 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l144
													}
													goto l143
												l144:
													position, tokenIndex = position143, tokenIndex143
													if buffer[position] != rune('.') {
														goto l138
													}
													position++
												}
											l143:
											l141:
												{
													position142, tokenIndex142 := position, tokenIndex
													{
														position145, tokenIndex145 := position, tokenIndex
														if !_rules[ruleNumber]() {
															goto l146
														}
														goto l145
													l146:
														position, tokenIndex = position145, tokenIndex145
														if buffer[position] != rune('.') {
															goto l142
														}
														position++
													}
												l145:
													goto l141
												l142:
													position, tokenIndex = position142, tokenIndex142
												}
												add(rulePegText, position140)
											}
											if buffer[position] != rune('*') {
												goto l138
											}
											position++
											{
												add(ruleAction6, position)
											}
											{
												position148 := position
												{
													position151, tokenIndex151 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l151
													}
													position++
													goto l138
												l151:
													position, tokenIndex = position151, tokenIndex151
												}
												if !matchDot() {
													goto l138
												}
											l149:
												{
													position150, tokenIndex150 := position, tokenIndex
													{
														position152, tokenIndex152 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l152
														}
														position++
														goto l150
													l152:
														position, tokenIndex = position152, tokenIndex152
													}
													if !matchDot() {
														goto l150
													}
													goto l149
												l150:
													position, tokenIndex = position150, tokenIndex150
												}
												add(rulePegText, position148)
											}
											{
												add(ruleAction7, position)
											}
											add(ruleMeasurement, position139)
										}
										goto l137
									l138:
										position, tokenIndex = position137, tokenIndex137
										{
											position155 := position
											{
												position156 := position
												if !_rules[ruleNumber]() {
													goto l154
												}
												{
													position157, tokenIndex157 := position, tokenIndex
													if buffer[position] != rune('S') {
														goto l158
													}
													position++
													goto l157
												l158:
													position, tokenIndex = position157, tokenIndex157
													if buffer[position] != rune('W') {
														goto l154
													}
													position++
												}
											l157:
												add(rulePegText, position156)
											}
											{
												add(ruleAction9, position)
											}
											add(ruleTimestamp, position155)
										}
										goto l137
									l154:
										position, tokenIndex = position137, tokenIndex137
										{
											position160 := position
											{
												position161 := position
												{
													position164, tokenIndex164 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l164
													}
													position++
													goto l136
												l164:
													position, tokenIndex = position164, tokenIndex164
												}
												if !matchDot() {
													goto l136
												}
											l162:
												{
													position163, tokenIndex163 := position, tokenIndex
													{
														position165, tokenIndex165 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l165
														}
														position++
														goto l163
													l165:
														position, tokenIndex = position165, tokenIndex165
													}
													if !matchDot() {
														goto l163
													}
													goto l162
												l163:
													position, tokenIndex = position163, tokenIndex163
												}
												add(rulePegText, position161)
											}
											{
												add(ruleAction8, position)
											}
											add(ruleText, position160)
										}
									}
								l137:
									goto l135
								l136:
									position, tokenIndex = position136, tokenIndex136
								}
								if buffer[position] != rune(')') {
									goto l97
								}
								position++
								{
									position167, tokenIndex167 := position, tokenIndex
									if !_rules[ruleEOL]() {
										goto l167
									}
									goto l168
								l167:
									position, tokenIndex = position167, tokenIndex167
								}
							l168:
								{
									add(ruleAction5, position)
								}
								add(ruleAttribute, position134)
							}
							goto l96
						l97:
							position, tokenIndex = position97, tokenIndex97
						}
						{
							add(ruleAction2, position)
						}
						add(ruleCOSEM, position91)
					}
					goto l9
				l10:
					position, tokenIndex = position10, tokenIndex10
				}
				{
					position171 := position
					if buffer[position] != rune('!') {
						goto l0
					}
					position++
				l172:
					{
						position173, tokenIndex173 := position, tokenIndex
						{
							position174 := position
							{
								position175, tokenIndex175 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l175
								}
								goto l173
							l175:
								position, tokenIndex = position175, tokenIndex175
							}
							if !matchDot() {
								goto l173
							}
							add(rulePegText, position174)
						}
						goto l172
					l173:
						position, tokenIndex = position173, tokenIndex173
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
					{
						add(ruleAction3, position)
					}
					add(ruleFooter, position171)
				}
				{
					position177 := position
					{
						position178, tokenIndex178 := position, tokenIndex
						if !matchDot() {
							goto l178
						}
						goto l0
					l178:
						position, tokenIndex = position178, tokenIndex178
					}
					add(ruleEOF, position177)
				}
				add(ruleTelegram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Header <- <(<('/' (!EOL .)+)> EOL Action0)> */
		nil,
		/* 2 COSEM <- <(OBIS Action1 Attribute+ Action2)> */
		nil,
		/* 3 Footer <- <('!' <(!EOL .)>* EOL Action3)> */
		nil,
		/* 4 OBIS <- <(<(Number '-' Number ':' Number '.' Number '.' Number)> Action4)> */
		nil,
		/* 5 Attribute <- <('(' (Measurement / Timestamp / Text)* ')' EOL? Action5)> */
		nil,
		/* 6 Measurement <- <(<(Number / '.')+> '*' Action6 <(!')' .)+> Action7)> */
		nil,
		/* 7 Text <- <(<(!')' .)+> Action8)> */
		nil,
		/* 8 Timestamp <- <(<(Number ('S' / 'W'))> Action9)> */
		nil,
		/* 9 Number <- <[0-9]+> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l187
				}
				position++
			l189:
				{
					position190, tokenIndex190 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l190
					}
					position++
					goto l189
				l190:
					position, tokenIndex = position190, tokenIndex190
				}
				add(ruleNumber, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 10 EOL <- <('\r' '\n')> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('\r') {
					goto l191
				}
				position++
				if buffer[position] != rune('\n') {
					goto l191
				}
				position++
				add(ruleEOL, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 11 EOF <- <!.> */
		nil,
		nil,
		/* 14 Action0 <- <{ p.t.Header = text }> */
		nil,
		/* 15 Action1 <- <{
		    p.c = &COSEM{OBIS: p.o}
		    p.a = nil
		}> */
		nil,
		/* 16 Action2 <- <{
		    p.t.COSEM = append(p.t.COSEM, p.c)
		}> */
		nil,
		/* 17 Action3 <- <{ p.t.Checksum = text }> */
		nil,
		/* 18 Action4 <- <{ p.o = &OBIS{Value: text} }> */
		nil,
		/* 19 Action5 <- <{
		    if p.a != nil {
		        p.c.Attribute = append(p.c.Attribute, p.a)
		    }
		}> */
		nil,
		/* 20 Action6 <- <{
		    p.a = &Measurement{Value: text}
		}> */
		nil,
		/* 21 Action7 <- <{
		    p.a.(*Measurement).Unit = text
		}> */
		nil,
		/* 22 Action8 <- <{ p.a = &Text{Value: text} }> */
		nil,
		/* 23 Action9 <- <{ p.a = &Timestamp{Value: text} }> */
		nil,
	}
	p.rules = _rules
	return nil
}
