package dsmr

// Code generated by peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"github.com/shopspring/decimal"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleTelegram
	ruleHeader
	ruleCOSEM
	ruleFooter
	ruleAttribute
	ruleMeasurement
	ruleOBIS
	ruleText
	ruleTimestamp
	ruleNumber
	ruleEOL
	ruleEOF
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"Telegram",
	"Header",
	"COSEM",
	"Footer",
	"Attribute",
	"Measurement",
	"OBIS",
	"Text",
	"Timestamp",
	"Number",
	"EOL",
	"EOF",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	t   *Telegram
	o   *OBIS
	c   *COSEM
	a   Attribute
	tz  *time.Location
	err Error

	Buffer string
	buffer []rune
	rules  [24]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.t.header = text
		case ruleAction1:
			p.c = &COSEM{obis: p.a.(*OBIS)}
			p.a = nil
		case ruleAction2:
			p.t.cosem[p.c.obis.value] = p.c
		case ruleAction3:
			p.t.checksum = text
		case ruleAction4:

			if p.a != nil {
				p.c.attribute = append(p.c.attribute, p.a)
			}

		case ruleAction5:

			d, err := decimal.NewFromString(text)
			if err != nil {
				p.err = err
				return
			}

			p.a = &Measurement{value: d}

		case ruleAction6:
			p.a.(*Measurement).unit = text
		case ruleAction7:
			p.a = &OBIS{value: text}
		case ruleAction8:
			p.a = &Text{value: text}
		case ruleAction9:
			t, _ := time.ParseInLocation("060102150405", text, p.tz)
			p.a = &Timestamp{value: t.UTC()}

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Telegram <- <(Header COSEM+ Footer EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						position3 := position
						if buffer[position] != rune('/') {
							goto l0
						}
						position++
						{
							position6, tokenIndex6 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l6
							}
							goto l0
						l6:
							position, tokenIndex = position6, tokenIndex6
						}
						if !matchDot() {
							goto l0
						}
					l4:
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7, tokenIndex7 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l7
								}
								goto l5
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							if !matchDot() {
								goto l5
							}
							goto l4
						l5:
							position, tokenIndex = position5, tokenIndex5
						}
						add(rulePegText, position3)
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
					{
						add(ruleAction0, position)
					}
					add(ruleHeader, position2)
				}
				{
					position13 := position
					if !_rules[ruleOBIS]() {
						goto l0
					}
					{
						add(ruleAction1, position)
					}
					{
						position17 := position
						if buffer[position] != rune('(') {
							goto l0
						}
						position++
					l18:
						{
							position19, tokenIndex19 := position, tokenIndex
							{
								position20, tokenIndex20 := position, tokenIndex
								{
									position22 := position
									{
										position23 := position
										{
											position26, tokenIndex26 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l27
											}
											goto l26
										l27:
											position, tokenIndex = position26, tokenIndex26
											if buffer[position] != rune('.') {
												goto l21
											}
											position++
										}
									l26:
									l24:
										{
											position25, tokenIndex25 := position, tokenIndex
											{
												position28, tokenIndex28 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l29
												}
												goto l28
											l29:
												position, tokenIndex = position28, tokenIndex28
												if buffer[position] != rune('.') {
													goto l25
												}
												position++
											}
										l28:
											goto l24
										l25:
											position, tokenIndex = position25, tokenIndex25
										}
										add(rulePegText, position23)
									}
									if buffer[position] != rune('*') {
										goto l21
									}
									position++
									{
										add(ruleAction5, position)
									}
									{
										position31 := position
										{
											position34, tokenIndex34 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l34
											}
											position++
											goto l21
										l34:
											position, tokenIndex = position34, tokenIndex34
										}
										if !matchDot() {
											goto l21
										}
									l32:
										{
											position33, tokenIndex33 := position, tokenIndex
											{
												position35, tokenIndex35 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l35
												}
												position++
												goto l33
											l35:
												position, tokenIndex = position35, tokenIndex35
											}
											if !matchDot() {
												goto l33
											}
											goto l32
										l33:
											position, tokenIndex = position33, tokenIndex33
										}
										add(rulePegText, position31)
									}
									{
										add(ruleAction6, position)
									}
									add(ruleMeasurement, position22)
								}
								goto l20
							l21:
								position, tokenIndex = position20, tokenIndex20
								if !_rules[ruleOBIS]() {
									goto l37
								}
								goto l20
							l37:
								position, tokenIndex = position20, tokenIndex20
								{
									position39 := position
									{
										position40 := position
										if !_rules[ruleNumber]() {
											goto l38
										}
										add(rulePegText, position40)
									}
									{
										position41, tokenIndex41 := position, tokenIndex
										if buffer[position] != rune('S') {
											goto l42
										}
										position++
										goto l41
									l42:
										position, tokenIndex = position41, tokenIndex41
										if buffer[position] != rune('W') {
											goto l38
										}
										position++
									}
								l41:
									{
										add(ruleAction9, position)
									}
									add(ruleTimestamp, position39)
								}
								goto l20
							l38:
								position, tokenIndex = position20, tokenIndex20
								{
									position44 := position
									{
										position45 := position
										{
											position48, tokenIndex48 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l48
											}
											position++
											goto l19
										l48:
											position, tokenIndex = position48, tokenIndex48
										}
										if !matchDot() {
											goto l19
										}
									l46:
										{
											position47, tokenIndex47 := position, tokenIndex
											{
												position49, tokenIndex49 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l49
												}
												position++
												goto l47
											l49:
												position, tokenIndex = position49, tokenIndex49
											}
											if !matchDot() {
												goto l47
											}
											goto l46
										l47:
											position, tokenIndex = position47, tokenIndex47
										}
										add(rulePegText, position45)
									}
									{
										add(ruleAction8, position)
									}
									add(ruleText, position44)
								}
							}
						l20:
							goto l18
						l19:
							position, tokenIndex = position19, tokenIndex19
						}
						if buffer[position] != rune(')') {
							goto l0
						}
						position++
						{
							position51, tokenIndex51 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l51
							}
							goto l52
						l51:
							position, tokenIndex = position51, tokenIndex51
						}
					l52:
						{
							add(ruleAction4, position)
						}
						add(ruleAttribute, position17)
					}
				l15:
					{
						position16, tokenIndex16 := position, tokenIndex
						{
							position54 := position
							if buffer[position] != rune('(') {
								goto l16
							}
							position++
						l55:
							{
								position56, tokenIndex56 := position, tokenIndex
								{
									position57, tokenIndex57 := position, tokenIndex
									{
										position59 := position
										{
											position60 := position
											{
												position63, tokenIndex63 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l64
												}
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('.') {
													goto l58
												}
												position++
											}
										l63:
										l61:
											{
												position62, tokenIndex62 := position, tokenIndex
												{
													position65, tokenIndex65 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l66
													}
													goto l65
												l66:
													position, tokenIndex = position65, tokenIndex65
													if buffer[position] != rune('.') {
														goto l62
													}
													position++
												}
											l65:
												goto l61
											l62:
												position, tokenIndex = position62, tokenIndex62
											}
											add(rulePegText, position60)
										}
										if buffer[position] != rune('*') {
											goto l58
										}
										position++
										{
											add(ruleAction5, position)
										}
										{
											position68 := position
											{
												position71, tokenIndex71 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l71
												}
												position++
												goto l58
											l71:
												position, tokenIndex = position71, tokenIndex71
											}
											if !matchDot() {
												goto l58
											}
										l69:
											{
												position70, tokenIndex70 := position, tokenIndex
												{
													position72, tokenIndex72 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l72
													}
													position++
													goto l70
												l72:
													position, tokenIndex = position72, tokenIndex72
												}
												if !matchDot() {
													goto l70
												}
												goto l69
											l70:
												position, tokenIndex = position70, tokenIndex70
											}
											add(rulePegText, position68)
										}
										{
											add(ruleAction6, position)
										}
										add(ruleMeasurement, position59)
									}
									goto l57
								l58:
									position, tokenIndex = position57, tokenIndex57
									if !_rules[ruleOBIS]() {
										goto l74
									}
									goto l57
								l74:
									position, tokenIndex = position57, tokenIndex57
									{
										position76 := position
										{
											position77 := position
											if !_rules[ruleNumber]() {
												goto l75
											}
											add(rulePegText, position77)
										}
										{
											position78, tokenIndex78 := position, tokenIndex
											if buffer[position] != rune('S') {
												goto l79
											}
											position++
											goto l78
										l79:
											position, tokenIndex = position78, tokenIndex78
											if buffer[position] != rune('W') {
												goto l75
											}
											position++
										}
									l78:
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position76)
									}
									goto l57
								l75:
									position, tokenIndex = position57, tokenIndex57
									{
										position81 := position
										{
											position82 := position
											{
												position85, tokenIndex85 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l85
												}
												position++
												goto l56
											l85:
												position, tokenIndex = position85, tokenIndex85
											}
											if !matchDot() {
												goto l56
											}
										l83:
											{
												position84, tokenIndex84 := position, tokenIndex
												{
													position86, tokenIndex86 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l86
													}
													position++
													goto l84
												l86:
													position, tokenIndex = position86, tokenIndex86
												}
												if !matchDot() {
													goto l84
												}
												goto l83
											l84:
												position, tokenIndex = position84, tokenIndex84
											}
											add(rulePegText, position82)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position81)
									}
								}
							l57:
								goto l55
							l56:
								position, tokenIndex = position56, tokenIndex56
							}
							if buffer[position] != rune(')') {
								goto l16
							}
							position++
							{
								position88, tokenIndex88 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l88
								}
								goto l89
							l88:
								position, tokenIndex = position88, tokenIndex88
							}
						l89:
							{
								add(ruleAction4, position)
							}
							add(ruleAttribute, position54)
						}
						goto l15
					l16:
						position, tokenIndex = position16, tokenIndex16
					}
					{
						add(ruleAction2, position)
					}
					add(ruleCOSEM, position13)
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					{
						position92 := position
						if !_rules[ruleOBIS]() {
							goto l12
						}
						{
							add(ruleAction1, position)
						}
						{
							position96 := position
							if buffer[position] != rune('(') {
								goto l12
							}
							position++
						l97:
							{
								position98, tokenIndex98 := position, tokenIndex
								{
									position99, tokenIndex99 := position, tokenIndex
									{
										position101 := position
										{
											position102 := position
											{
												position105, tokenIndex105 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l106
												}
												goto l105
											l106:
												position, tokenIndex = position105, tokenIndex105
												if buffer[position] != rune('.') {
													goto l100
												}
												position++
											}
										l105:
										l103:
											{
												position104, tokenIndex104 := position, tokenIndex
												{
													position107, tokenIndex107 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l108
													}
													goto l107
												l108:
													position, tokenIndex = position107, tokenIndex107
													if buffer[position] != rune('.') {
														goto l104
													}
													position++
												}
											l107:
												goto l103
											l104:
												position, tokenIndex = position104, tokenIndex104
											}
											add(rulePegText, position102)
										}
										if buffer[position] != rune('*') {
											goto l100
										}
										position++
										{
											add(ruleAction5, position)
										}
										{
											position110 := position
											{
												position113, tokenIndex113 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l113
												}
												position++
												goto l100
											l113:
												position, tokenIndex = position113, tokenIndex113
											}
											if !matchDot() {
												goto l100
											}
										l111:
											{
												position112, tokenIndex112 := position, tokenIndex
												{
													position114, tokenIndex114 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l114
													}
													position++
													goto l112
												l114:
													position, tokenIndex = position114, tokenIndex114
												}
												if !matchDot() {
													goto l112
												}
												goto l111
											l112:
												position, tokenIndex = position112, tokenIndex112
											}
											add(rulePegText, position110)
										}
										{
											add(ruleAction6, position)
										}
										add(ruleMeasurement, position101)
									}
									goto l99
								l100:
									position, tokenIndex = position99, tokenIndex99
									if !_rules[ruleOBIS]() {
										goto l116
									}
									goto l99
								l116:
									position, tokenIndex = position99, tokenIndex99
									{
										position118 := position
										{
											position119 := position
											if !_rules[ruleNumber]() {
												goto l117
											}
											add(rulePegText, position119)
										}
										{
											position120, tokenIndex120 := position, tokenIndex
											if buffer[position] != rune('S') {
												goto l121
											}
											position++
											goto l120
										l121:
											position, tokenIndex = position120, tokenIndex120
											if buffer[position] != rune('W') {
												goto l117
											}
											position++
										}
									l120:
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position118)
									}
									goto l99
								l117:
									position, tokenIndex = position99, tokenIndex99
									{
										position123 := position
										{
											position124 := position
											{
												position127, tokenIndex127 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l127
												}
												position++
												goto l98
											l127:
												position, tokenIndex = position127, tokenIndex127
											}
											if !matchDot() {
												goto l98
											}
										l125:
											{
												position126, tokenIndex126 := position, tokenIndex
												{
													position128, tokenIndex128 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l128
													}
													position++
													goto l126
												l128:
													position, tokenIndex = position128, tokenIndex128
												}
												if !matchDot() {
													goto l126
												}
												goto l125
											l126:
												position, tokenIndex = position126, tokenIndex126
											}
											add(rulePegText, position124)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position123)
									}
								}
							l99:
								goto l97
							l98:
								position, tokenIndex = position98, tokenIndex98
							}
							if buffer[position] != rune(')') {
								goto l12
							}
							position++
							{
								position130, tokenIndex130 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l130
								}
								goto l131
							l130:
								position, tokenIndex = position130, tokenIndex130
							}
						l131:
							{
								add(ruleAction4, position)
							}
							add(ruleAttribute, position96)
						}
					l94:
						{
							position95, tokenIndex95 := position, tokenIndex
							{
								position133 := position
								if buffer[position] != rune('(') {
									goto l95
								}
								position++
							l134:
								{
									position135, tokenIndex135 := position, tokenIndex
									{
										position136, tokenIndex136 := position, tokenIndex
										{
											position138 := position
											{
												position139 := position
												{
													position142, tokenIndex142 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l143
													}
													goto l142
												l143:
													position, tokenIndex = position142, tokenIndex142
													if buffer[position] != rune('.') {
														goto l137
													}
													position++
												}
											l142:
											l140:
												{
													position141, tokenIndex141 := position, tokenIndex
													{
														position144, tokenIndex144 := position, tokenIndex
														if !_rules[ruleNumber]() {
															goto l145
														}
														goto l144
													l145:
														position, tokenIndex = position144, tokenIndex144
														if buffer[position] != rune('.') {
															goto l141
														}
														position++
													}
												l144:
													goto l140
												l141:
													position, tokenIndex = position141, tokenIndex141
												}
												add(rulePegText, position139)
											}
											if buffer[position] != rune('*') {
												goto l137
											}
											position++
											{
												add(ruleAction5, position)
											}
											{
												position147 := position
												{
													position150, tokenIndex150 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l150
													}
													position++
													goto l137
												l150:
													position, tokenIndex = position150, tokenIndex150
												}
												if !matchDot() {
													goto l137
												}
											l148:
												{
													position149, tokenIndex149 := position, tokenIndex
													{
														position151, tokenIndex151 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l151
														}
														position++
														goto l149
													l151:
														position, tokenIndex = position151, tokenIndex151
													}
													if !matchDot() {
														goto l149
													}
													goto l148
												l149:
													position, tokenIndex = position149, tokenIndex149
												}
												add(rulePegText, position147)
											}
											{
												add(ruleAction6, position)
											}
											add(ruleMeasurement, position138)
										}
										goto l136
									l137:
										position, tokenIndex = position136, tokenIndex136
										if !_rules[ruleOBIS]() {
											goto l153
										}
										goto l136
									l153:
										position, tokenIndex = position136, tokenIndex136
										{
											position155 := position
											{
												position156 := position
												if !_rules[ruleNumber]() {
													goto l154
												}
												add(rulePegText, position156)
											}
											{
												position157, tokenIndex157 := position, tokenIndex
												if buffer[position] != rune('S') {
													goto l158
												}
												position++
												goto l157
											l158:
												position, tokenIndex = position157, tokenIndex157
												if buffer[position] != rune('W') {
													goto l154
												}
												position++
											}
										l157:
											{
												add(ruleAction9, position)
											}
											add(ruleTimestamp, position155)
										}
										goto l136
									l154:
										position, tokenIndex = position136, tokenIndex136
										{
											position160 := position
											{
												position161 := position
												{
													position164, tokenIndex164 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l164
													}
													position++
													goto l135
												l164:
													position, tokenIndex = position164, tokenIndex164
												}
												if !matchDot() {
													goto l135
												}
											l162:
												{
													position163, tokenIndex163 := position, tokenIndex
													{
														position165, tokenIndex165 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l165
														}
														position++
														goto l163
													l165:
														position, tokenIndex = position165, tokenIndex165
													}
													if !matchDot() {
														goto l163
													}
													goto l162
												l163:
													position, tokenIndex = position163, tokenIndex163
												}
												add(rulePegText, position161)
											}
											{
												add(ruleAction8, position)
											}
											add(ruleText, position160)
										}
									}
								l136:
									goto l134
								l135:
									position, tokenIndex = position135, tokenIndex135
								}
								if buffer[position] != rune(')') {
									goto l95
								}
								position++
								{
									position167, tokenIndex167 := position, tokenIndex
									if !_rules[ruleEOL]() {
										goto l167
									}
									goto l168
								l167:
									position, tokenIndex = position167, tokenIndex167
								}
							l168:
								{
									add(ruleAction4, position)
								}
								add(ruleAttribute, position133)
							}
							goto l94
						l95:
							position, tokenIndex = position95, tokenIndex95
						}
						{
							add(ruleAction2, position)
						}
						add(ruleCOSEM, position92)
					}
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				{
					position171 := position
					if buffer[position] != rune('!') {
						goto l0
					}
					position++
					{
						position172 := position
					l173:
						{
							position174, tokenIndex174 := position, tokenIndex
							{
								position175, tokenIndex175 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l175
								}
								goto l174
							l175:
								position, tokenIndex = position175, tokenIndex175
							}
							if !matchDot() {
								goto l174
							}
							goto l173
						l174:
							position, tokenIndex = position174, tokenIndex174
						}
						add(rulePegText, position172)
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
					{
						add(ruleAction3, position)
					}
					add(ruleFooter, position171)
				}
				{
					position177 := position
					{
						position178, tokenIndex178 := position, tokenIndex
						if !matchDot() {
							goto l178
						}
						goto l0
					l178:
						position, tokenIndex = position178, tokenIndex178
					}
					add(ruleEOF, position177)
				}
				add(ruleTelegram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Header <- <(<('/' (!EOL .)+)> EOL+ Action0)> */
		nil,
		/* 2 COSEM <- <(OBIS Action1 Attribute+ Action2)> */
		nil,
		/* 3 Footer <- <('!' <(!EOL .)*> EOL Action3)> */
		nil,
		/* 4 Attribute <- <('(' (Measurement / OBIS / Timestamp / Text)* ')' EOL? Action4)> */
		nil,
		/* 5 Measurement <- <(<(Number / '.')+> '*' Action5 <(!')' .)+> Action6)> */
		nil,
		/* 6 OBIS <- <(<(Number '-' Number ':' Number '.' Number '.' Number)> Action7)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186 := position
					if !_rules[ruleNumber]() {
						goto l184
					}
					if buffer[position] != rune('-') {
						goto l184
					}
					position++
					if !_rules[ruleNumber]() {
						goto l184
					}
					if buffer[position] != rune(':') {
						goto l184
					}
					position++
					if !_rules[ruleNumber]() {
						goto l184
					}
					if buffer[position] != rune('.') {
						goto l184
					}
					position++
					if !_rules[ruleNumber]() {
						goto l184
					}
					if buffer[position] != rune('.') {
						goto l184
					}
					position++
					if !_rules[ruleNumber]() {
						goto l184
					}
					add(rulePegText, position186)
				}
				{
					add(ruleAction7, position)
				}
				add(ruleOBIS, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 7 Text <- <(<(!')' .)+> Action8)> */
		nil,
		/* 8 Timestamp <- <(<Number> ('S' / 'W') Action9)> */
		nil,
		/* 9 Number <- <[0-9]+> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l190
				}
				position++
			l192:
				{
					position193, tokenIndex193 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l193
					}
					position++
					goto l192
				l193:
					position, tokenIndex = position193, tokenIndex193
				}
				add(ruleNumber, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 10 EOL <- <('\r' '\n')> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if buffer[position] != rune('\r') {
					goto l194
				}
				position++
				if buffer[position] != rune('\n') {
					goto l194
				}
				position++
				add(ruleEOL, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 11 EOF <- <!.> */
		nil,
		nil,
		/* 14 Action0 <- <{ p.t.header = text }> */
		nil,
		/* 15 Action1 <- <{ p.c = &COSEM{obis: p.a.(*OBIS)}; p.a = nil }> */
		nil,
		/* 16 Action2 <- <{ p.t.cosem[p.c.obis.value] = p.c }> */
		nil,
		/* 17 Action3 <- <{ p.t.checksum = text }> */
		nil,
		/* 18 Action4 <- <{
		    if p.a != nil {
		        p.c.attribute = append(p.c.attribute, p.a)
		    }
		}> */
		nil,
		/* 19 Action5 <- <{
		    d, err := decimal.NewFromString(text)
		    if err != nil {
		        p.err = err
		        return
		    }

		    p.a = &Measurement{value: d}
		}> */
		nil,
		/* 20 Action6 <- <{ p.a.(*Measurement).unit = text }> */
		nil,
		/* 21 Action7 <- <{ p.a = &OBIS{value: text} }> */
		nil,
		/* 22 Action8 <- <{ p.a = &Text{value: text} }> */
		nil,
		/* 23 Action9 <- <{ t, _ := time.ParseInLocation("060102150405", text, p.tz); p.a = &Timestamp{value: t.UTC()} }> */
		nil,
	}
	p.rules = _rules
	return nil
}
