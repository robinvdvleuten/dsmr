package dsmr

// Code generated by peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleTelegram
	ruleHeader
	ruleCOSEM
	ruleFooter
	ruleOBIS
	ruleAttribute
	ruleMeasurement
	ruleText
	ruleTimestamp
	ruleNumber
	ruleEOL
	ruleEOF
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"Telegram",
	"Header",
	"COSEM",
	"Footer",
	"OBIS",
	"Attribute",
	"Measurement",
	"Text",
	"Timestamp",
	"Number",
	"EOL",
	"EOF",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	t  *Telegram
	o  *OBIS
	c  *COSEM
	a  Attribute
	tz *time.Location

	Buffer string
	buffer []rune
	rules  [24]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.t.header = text
		case ruleAction1:
			p.c = &COSEM{obis: p.o}
			p.a = nil
		case ruleAction2:
			p.t.cosem[p.c.obis.value] = p.c
		case ruleAction3:
			p.t.checksum = text
		case ruleAction4:
			p.o = &OBIS{value: text}
		case ruleAction5:

			if p.a != nil {
				p.c.attribute = append(p.c.attribute, p.a)
			}

		case ruleAction6:
			n, _ := strconv.ParseFloat(text, 32)
			p.a = &Measurement{value: n}
		case ruleAction7:
			p.a.(*Measurement).unit = text
		case ruleAction8:
			p.a = &Text{value: text}
		case ruleAction9:
			t, _ := time.ParseInLocation("060102150405", text, p.tz)
			p.a = &Timestamp{value: t.UTC()}

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Telegram <- <(Header COSEM+ Footer EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						position3 := position
						if buffer[position] != rune('/') {
							goto l0
						}
						position++
						{
							position6, tokenIndex6 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l6
							}
							goto l0
						l6:
							position, tokenIndex = position6, tokenIndex6
						}
						if !matchDot() {
							goto l0
						}
					l4:
						{
							position5, tokenIndex5 := position, tokenIndex
							{
								position7, tokenIndex7 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l7
								}
								goto l5
							l7:
								position, tokenIndex = position7, tokenIndex7
							}
							if !matchDot() {
								goto l5
							}
							goto l4
						l5:
							position, tokenIndex = position5, tokenIndex5
						}
						add(rulePegText, position3)
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
					{
						add(ruleAction0, position)
					}
					add(ruleHeader, position2)
				}
				{
					position13 := position
					{
						position14 := position
						{
							position15 := position
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('-') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune(':') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('.') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							if buffer[position] != rune('.') {
								goto l0
							}
							position++
							if !_rules[ruleNumber]() {
								goto l0
							}
							add(rulePegText, position15)
						}
						{
							add(ruleAction4, position)
						}
						add(ruleOBIS, position14)
					}
					{
						add(ruleAction1, position)
					}
					{
						position20 := position
						if buffer[position] != rune('(') {
							goto l0
						}
						position++
					l21:
						{
							position22, tokenIndex22 := position, tokenIndex
							{
								position23, tokenIndex23 := position, tokenIndex
								{
									position25 := position
									{
										position26 := position
										{
											position29, tokenIndex29 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l30
											}
											goto l29
										l30:
											position, tokenIndex = position29, tokenIndex29
											if buffer[position] != rune('.') {
												goto l24
											}
											position++
										}
									l29:
									l27:
										{
											position28, tokenIndex28 := position, tokenIndex
											{
												position31, tokenIndex31 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l32
												}
												goto l31
											l32:
												position, tokenIndex = position31, tokenIndex31
												if buffer[position] != rune('.') {
													goto l28
												}
												position++
											}
										l31:
											goto l27
										l28:
											position, tokenIndex = position28, tokenIndex28
										}
										add(rulePegText, position26)
									}
									if buffer[position] != rune('*') {
										goto l24
									}
									position++
									{
										add(ruleAction6, position)
									}
									{
										position34 := position
										{
											position37, tokenIndex37 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l37
											}
											position++
											goto l24
										l37:
											position, tokenIndex = position37, tokenIndex37
										}
										if !matchDot() {
											goto l24
										}
									l35:
										{
											position36, tokenIndex36 := position, tokenIndex
											{
												position38, tokenIndex38 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l38
												}
												position++
												goto l36
											l38:
												position, tokenIndex = position38, tokenIndex38
											}
											if !matchDot() {
												goto l36
											}
											goto l35
										l36:
											position, tokenIndex = position36, tokenIndex36
										}
										add(rulePegText, position34)
									}
									{
										add(ruleAction7, position)
									}
									add(ruleMeasurement, position25)
								}
								goto l23
							l24:
								position, tokenIndex = position23, tokenIndex23
								{
									position41 := position
									{
										position42 := position
										if !_rules[ruleNumber]() {
											goto l40
										}
										add(rulePegText, position42)
									}
									{
										position43, tokenIndex43 := position, tokenIndex
										if buffer[position] != rune('S') {
											goto l44
										}
										position++
										goto l43
									l44:
										position, tokenIndex = position43, tokenIndex43
										if buffer[position] != rune('W') {
											goto l40
										}
										position++
									}
								l43:
									{
										add(ruleAction9, position)
									}
									add(ruleTimestamp, position41)
								}
								goto l23
							l40:
								position, tokenIndex = position23, tokenIndex23
								{
									position46 := position
									{
										position47 := position
										{
											position50, tokenIndex50 := position, tokenIndex
											if buffer[position] != rune(')') {
												goto l50
											}
											position++
											goto l22
										l50:
											position, tokenIndex = position50, tokenIndex50
										}
										if !matchDot() {
											goto l22
										}
									l48:
										{
											position49, tokenIndex49 := position, tokenIndex
											{
												position51, tokenIndex51 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l51
												}
												position++
												goto l49
											l51:
												position, tokenIndex = position51, tokenIndex51
											}
											if !matchDot() {
												goto l49
											}
											goto l48
										l49:
											position, tokenIndex = position49, tokenIndex49
										}
										add(rulePegText, position47)
									}
									{
										add(ruleAction8, position)
									}
									add(ruleText, position46)
								}
							}
						l23:
							goto l21
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
						if buffer[position] != rune(')') {
							goto l0
						}
						position++
						{
							position53, tokenIndex53 := position, tokenIndex
							if !_rules[ruleEOL]() {
								goto l53
							}
							goto l54
						l53:
							position, tokenIndex = position53, tokenIndex53
						}
					l54:
						{
							add(ruleAction5, position)
						}
						add(ruleAttribute, position20)
					}
				l18:
					{
						position19, tokenIndex19 := position, tokenIndex
						{
							position56 := position
							if buffer[position] != rune('(') {
								goto l19
							}
							position++
						l57:
							{
								position58, tokenIndex58 := position, tokenIndex
								{
									position59, tokenIndex59 := position, tokenIndex
									{
										position61 := position
										{
											position62 := position
											{
												position65, tokenIndex65 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l66
												}
												goto l65
											l66:
												position, tokenIndex = position65, tokenIndex65
												if buffer[position] != rune('.') {
													goto l60
												}
												position++
											}
										l65:
										l63:
											{
												position64, tokenIndex64 := position, tokenIndex
												{
													position67, tokenIndex67 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l68
													}
													goto l67
												l68:
													position, tokenIndex = position67, tokenIndex67
													if buffer[position] != rune('.') {
														goto l64
													}
													position++
												}
											l67:
												goto l63
											l64:
												position, tokenIndex = position64, tokenIndex64
											}
											add(rulePegText, position62)
										}
										if buffer[position] != rune('*') {
											goto l60
										}
										position++
										{
											add(ruleAction6, position)
										}
										{
											position70 := position
											{
												position73, tokenIndex73 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l73
												}
												position++
												goto l60
											l73:
												position, tokenIndex = position73, tokenIndex73
											}
											if !matchDot() {
												goto l60
											}
										l71:
											{
												position72, tokenIndex72 := position, tokenIndex
												{
													position74, tokenIndex74 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l74
													}
													position++
													goto l72
												l74:
													position, tokenIndex = position74, tokenIndex74
												}
												if !matchDot() {
													goto l72
												}
												goto l71
											l72:
												position, tokenIndex = position72, tokenIndex72
											}
											add(rulePegText, position70)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleMeasurement, position61)
									}
									goto l59
								l60:
									position, tokenIndex = position59, tokenIndex59
									{
										position77 := position
										{
											position78 := position
											if !_rules[ruleNumber]() {
												goto l76
											}
											add(rulePegText, position78)
										}
										{
											position79, tokenIndex79 := position, tokenIndex
											if buffer[position] != rune('S') {
												goto l80
											}
											position++
											goto l79
										l80:
											position, tokenIndex = position79, tokenIndex79
											if buffer[position] != rune('W') {
												goto l76
											}
											position++
										}
									l79:
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position77)
									}
									goto l59
								l76:
									position, tokenIndex = position59, tokenIndex59
									{
										position82 := position
										{
											position83 := position
											{
												position86, tokenIndex86 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l86
												}
												position++
												goto l58
											l86:
												position, tokenIndex = position86, tokenIndex86
											}
											if !matchDot() {
												goto l58
											}
										l84:
											{
												position85, tokenIndex85 := position, tokenIndex
												{
													position87, tokenIndex87 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l87
													}
													position++
													goto l85
												l87:
													position, tokenIndex = position87, tokenIndex87
												}
												if !matchDot() {
													goto l85
												}
												goto l84
											l85:
												position, tokenIndex = position85, tokenIndex85
											}
											add(rulePegText, position83)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position82)
									}
								}
							l59:
								goto l57
							l58:
								position, tokenIndex = position58, tokenIndex58
							}
							if buffer[position] != rune(')') {
								goto l19
							}
							position++
							{
								position89, tokenIndex89 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l89
								}
								goto l90
							l89:
								position, tokenIndex = position89, tokenIndex89
							}
						l90:
							{
								add(ruleAction5, position)
							}
							add(ruleAttribute, position56)
						}
						goto l18
					l19:
						position, tokenIndex = position19, tokenIndex19
					}
					{
						add(ruleAction2, position)
					}
					add(ruleCOSEM, position13)
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					{
						position93 := position
						{
							position94 := position
							{
								position95 := position
								if !_rules[ruleNumber]() {
									goto l12
								}
								if buffer[position] != rune('-') {
									goto l12
								}
								position++
								if !_rules[ruleNumber]() {
									goto l12
								}
								if buffer[position] != rune(':') {
									goto l12
								}
								position++
								if !_rules[ruleNumber]() {
									goto l12
								}
								if buffer[position] != rune('.') {
									goto l12
								}
								position++
								if !_rules[ruleNumber]() {
									goto l12
								}
								if buffer[position] != rune('.') {
									goto l12
								}
								position++
								if !_rules[ruleNumber]() {
									goto l12
								}
								add(rulePegText, position95)
							}
							{
								add(ruleAction4, position)
							}
							add(ruleOBIS, position94)
						}
						{
							add(ruleAction1, position)
						}
						{
							position100 := position
							if buffer[position] != rune('(') {
								goto l12
							}
							position++
						l101:
							{
								position102, tokenIndex102 := position, tokenIndex
								{
									position103, tokenIndex103 := position, tokenIndex
									{
										position105 := position
										{
											position106 := position
											{
												position109, tokenIndex109 := position, tokenIndex
												if !_rules[ruleNumber]() {
													goto l110
												}
												goto l109
											l110:
												position, tokenIndex = position109, tokenIndex109
												if buffer[position] != rune('.') {
													goto l104
												}
												position++
											}
										l109:
										l107:
											{
												position108, tokenIndex108 := position, tokenIndex
												{
													position111, tokenIndex111 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l112
													}
													goto l111
												l112:
													position, tokenIndex = position111, tokenIndex111
													if buffer[position] != rune('.') {
														goto l108
													}
													position++
												}
											l111:
												goto l107
											l108:
												position, tokenIndex = position108, tokenIndex108
											}
											add(rulePegText, position106)
										}
										if buffer[position] != rune('*') {
											goto l104
										}
										position++
										{
											add(ruleAction6, position)
										}
										{
											position114 := position
											{
												position117, tokenIndex117 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l117
												}
												position++
												goto l104
											l117:
												position, tokenIndex = position117, tokenIndex117
											}
											if !matchDot() {
												goto l104
											}
										l115:
											{
												position116, tokenIndex116 := position, tokenIndex
												{
													position118, tokenIndex118 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l118
													}
													position++
													goto l116
												l118:
													position, tokenIndex = position118, tokenIndex118
												}
												if !matchDot() {
													goto l116
												}
												goto l115
											l116:
												position, tokenIndex = position116, tokenIndex116
											}
											add(rulePegText, position114)
										}
										{
											add(ruleAction7, position)
										}
										add(ruleMeasurement, position105)
									}
									goto l103
								l104:
									position, tokenIndex = position103, tokenIndex103
									{
										position121 := position
										{
											position122 := position
											if !_rules[ruleNumber]() {
												goto l120
											}
											add(rulePegText, position122)
										}
										{
											position123, tokenIndex123 := position, tokenIndex
											if buffer[position] != rune('S') {
												goto l124
											}
											position++
											goto l123
										l124:
											position, tokenIndex = position123, tokenIndex123
											if buffer[position] != rune('W') {
												goto l120
											}
											position++
										}
									l123:
										{
											add(ruleAction9, position)
										}
										add(ruleTimestamp, position121)
									}
									goto l103
								l120:
									position, tokenIndex = position103, tokenIndex103
									{
										position126 := position
										{
											position127 := position
											{
												position130, tokenIndex130 := position, tokenIndex
												if buffer[position] != rune(')') {
													goto l130
												}
												position++
												goto l102
											l130:
												position, tokenIndex = position130, tokenIndex130
											}
											if !matchDot() {
												goto l102
											}
										l128:
											{
												position129, tokenIndex129 := position, tokenIndex
												{
													position131, tokenIndex131 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l131
													}
													position++
													goto l129
												l131:
													position, tokenIndex = position131, tokenIndex131
												}
												if !matchDot() {
													goto l129
												}
												goto l128
											l129:
												position, tokenIndex = position129, tokenIndex129
											}
											add(rulePegText, position127)
										}
										{
											add(ruleAction8, position)
										}
										add(ruleText, position126)
									}
								}
							l103:
								goto l101
							l102:
								position, tokenIndex = position102, tokenIndex102
							}
							if buffer[position] != rune(')') {
								goto l12
							}
							position++
							{
								position133, tokenIndex133 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l133
								}
								goto l134
							l133:
								position, tokenIndex = position133, tokenIndex133
							}
						l134:
							{
								add(ruleAction5, position)
							}
							add(ruleAttribute, position100)
						}
					l98:
						{
							position99, tokenIndex99 := position, tokenIndex
							{
								position136 := position
								if buffer[position] != rune('(') {
									goto l99
								}
								position++
							l137:
								{
									position138, tokenIndex138 := position, tokenIndex
									{
										position139, tokenIndex139 := position, tokenIndex
										{
											position141 := position
											{
												position142 := position
												{
													position145, tokenIndex145 := position, tokenIndex
													if !_rules[ruleNumber]() {
														goto l146
													}
													goto l145
												l146:
													position, tokenIndex = position145, tokenIndex145
													if buffer[position] != rune('.') {
														goto l140
													}
													position++
												}
											l145:
											l143:
												{
													position144, tokenIndex144 := position, tokenIndex
													{
														position147, tokenIndex147 := position, tokenIndex
														if !_rules[ruleNumber]() {
															goto l148
														}
														goto l147
													l148:
														position, tokenIndex = position147, tokenIndex147
														if buffer[position] != rune('.') {
															goto l144
														}
														position++
													}
												l147:
													goto l143
												l144:
													position, tokenIndex = position144, tokenIndex144
												}
												add(rulePegText, position142)
											}
											if buffer[position] != rune('*') {
												goto l140
											}
											position++
											{
												add(ruleAction6, position)
											}
											{
												position150 := position
												{
													position153, tokenIndex153 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l153
													}
													position++
													goto l140
												l153:
													position, tokenIndex = position153, tokenIndex153
												}
												if !matchDot() {
													goto l140
												}
											l151:
												{
													position152, tokenIndex152 := position, tokenIndex
													{
														position154, tokenIndex154 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l154
														}
														position++
														goto l152
													l154:
														position, tokenIndex = position154, tokenIndex154
													}
													if !matchDot() {
														goto l152
													}
													goto l151
												l152:
													position, tokenIndex = position152, tokenIndex152
												}
												add(rulePegText, position150)
											}
											{
												add(ruleAction7, position)
											}
											add(ruleMeasurement, position141)
										}
										goto l139
									l140:
										position, tokenIndex = position139, tokenIndex139
										{
											position157 := position
											{
												position158 := position
												if !_rules[ruleNumber]() {
													goto l156
												}
												add(rulePegText, position158)
											}
											{
												position159, tokenIndex159 := position, tokenIndex
												if buffer[position] != rune('S') {
													goto l160
												}
												position++
												goto l159
											l160:
												position, tokenIndex = position159, tokenIndex159
												if buffer[position] != rune('W') {
													goto l156
												}
												position++
											}
										l159:
											{
												add(ruleAction9, position)
											}
											add(ruleTimestamp, position157)
										}
										goto l139
									l156:
										position, tokenIndex = position139, tokenIndex139
										{
											position162 := position
											{
												position163 := position
												{
													position166, tokenIndex166 := position, tokenIndex
													if buffer[position] != rune(')') {
														goto l166
													}
													position++
													goto l138
												l166:
													position, tokenIndex = position166, tokenIndex166
												}
												if !matchDot() {
													goto l138
												}
											l164:
												{
													position165, tokenIndex165 := position, tokenIndex
													{
														position167, tokenIndex167 := position, tokenIndex
														if buffer[position] != rune(')') {
															goto l167
														}
														position++
														goto l165
													l167:
														position, tokenIndex = position167, tokenIndex167
													}
													if !matchDot() {
														goto l165
													}
													goto l164
												l165:
													position, tokenIndex = position165, tokenIndex165
												}
												add(rulePegText, position163)
											}
											{
												add(ruleAction8, position)
											}
											add(ruleText, position162)
										}
									}
								l139:
									goto l137
								l138:
									position, tokenIndex = position138, tokenIndex138
								}
								if buffer[position] != rune(')') {
									goto l99
								}
								position++
								{
									position169, tokenIndex169 := position, tokenIndex
									if !_rules[ruleEOL]() {
										goto l169
									}
									goto l170
								l169:
									position, tokenIndex = position169, tokenIndex169
								}
							l170:
								{
									add(ruleAction5, position)
								}
								add(ruleAttribute, position136)
							}
							goto l98
						l99:
							position, tokenIndex = position99, tokenIndex99
						}
						{
							add(ruleAction2, position)
						}
						add(ruleCOSEM, position93)
					}
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				{
					position173 := position
					if buffer[position] != rune('!') {
						goto l0
					}
					position++
					{
						position174 := position
					l175:
						{
							position176, tokenIndex176 := position, tokenIndex
							{
								position177, tokenIndex177 := position, tokenIndex
								if !_rules[ruleEOL]() {
									goto l177
								}
								goto l176
							l177:
								position, tokenIndex = position177, tokenIndex177
							}
							if !matchDot() {
								goto l176
							}
							goto l175
						l176:
							position, tokenIndex = position176, tokenIndex176
						}
						add(rulePegText, position174)
					}
					if !_rules[ruleEOL]() {
						goto l0
					}
					{
						add(ruleAction3, position)
					}
					add(ruleFooter, position173)
				}
				{
					position179 := position
					{
						position180, tokenIndex180 := position, tokenIndex
						if !matchDot() {
							goto l180
						}
						goto l0
					l180:
						position, tokenIndex = position180, tokenIndex180
					}
					add(ruleEOF, position179)
				}
				add(ruleTelegram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Header <- <(<('/' (!EOL .)+)> EOL+ Action0)> */
		nil,
		/* 2 COSEM <- <(OBIS Action1 Attribute+ Action2)> */
		nil,
		/* 3 Footer <- <('!' <(!EOL .)*> EOL Action3)> */
		nil,
		/* 4 OBIS <- <(<(Number '-' Number ':' Number '.' Number '.' Number)> Action4)> */
		nil,
		/* 5 Attribute <- <('(' (Measurement / Timestamp / Text)* ')' EOL? Action5)> */
		nil,
		/* 6 Measurement <- <(<(Number / '.')+> '*' Action6 <(!')' .)+> Action7)> */
		nil,
		/* 7 Text <- <(<(!')' .)+> Action8)> */
		nil,
		/* 8 Timestamp <- <(<Number> ('S' / 'W') Action9)> */
		nil,
		/* 9 Number <- <[0-9]+> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l189
				}
				position++
			l191:
				{
					position192, tokenIndex192 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l192
					}
					position++
					goto l191
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
				add(ruleNumber, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 10 EOL <- <('\r' '\n')> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if buffer[position] != rune('\r') {
					goto l193
				}
				position++
				if buffer[position] != rune('\n') {
					goto l193
				}
				position++
				add(ruleEOL, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 11 EOF <- <!.> */
		nil,
		nil,
		/* 14 Action0 <- <{ p.t.header = text }> */
		nil,
		/* 15 Action1 <- <{ p.c = &COSEM{obis: p.o}; p.a = nil }> */
		nil,
		/* 16 Action2 <- <{ p.t.cosem[p.c.obis.value] = p.c }> */
		nil,
		/* 17 Action3 <- <{ p.t.checksum = text }> */
		nil,
		/* 18 Action4 <- <{ p.o = &OBIS{value: text} }> */
		nil,
		/* 19 Action5 <- <{
		    if p.a != nil {
		        p.c.attribute = append(p.c.attribute, p.a)
		    }
		}> */
		nil,
		/* 20 Action6 <- <{ n, _ := strconv.ParseFloat(text, 32); p.a = &Measurement{value: n} }> */
		nil,
		/* 21 Action7 <- <{ p.a.(*Measurement).unit = text }> */
		nil,
		/* 22 Action8 <- <{ p.a = &Text{value: text} }> */
		nil,
		/* 23 Action9 <- <{ t, _ := time.ParseInLocation("060102150405", text, p.tz); p.a = &Timestamp{value: t.UTC()} }> */
		nil,
	}
	p.rules = _rules
	return nil
}
