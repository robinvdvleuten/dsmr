package dsmr

import (
	"testing"
	"time"

	"github.com/alecthomas/assert/v2"
	"github.com/alecthomas/repr"
	"github.com/shopspring/decimal"
)

func TestParse(t *testing.T) {
	tests := []struct {
		name     string
		telegram string
		fail     string
		expected *Telegram
	}{
		{
			name: "v2.2",
			telegram: "" +
				"/ISk5\\2MT382-1004\r\n" +
				"\r\n" +
				"0-0:96.1.1(00000000000000)\r\n" +
				"1-0:1.8.1(00001.001*kWh)\r\n" +
				"1-0:1.8.2(00001.001*kWh)\r\n" +
				"1-0:2.8.1(00001.001*kWh)\r\n" +
				"1-0:2.8.2(00001.001*kWh)\r\n" +
				"0-0:96.14.0(0001)\r\n" +
				"1-0:1.7.0(0001.01*kW)\r\n" +
				"1-0:2.7.0(0000.00*kW)\r\n" +
				"0-0:17.0.0(0999.00*kW)\r\n" +
				"0-0:96.3.10(1)\r\n" +
				"0-0:96.13.1()\r\n" +
				"0-0:96.13.0()\r\n" +
				"0-1:24.1.0(3)\r\n" +
				"0-1:96.1.0(000000000000)\r\n" +
				"0-1:24.3.0(161107190000)(00)(60)(1)(0-1:24.2.1)(m3)\r\n" +
				"(00001.001)\r\n" +
				"0-1:24.4.0(1)\r\n" +
				"!\r\n",
			expected: &Telegram{
				header: "ISk5\\2MT382-1004",
				cosem: map[string]*COSEM{
					"0-0:96.1.1":  cosem("0-0:96.1.1", txt("00000000000000")),
					"1-0:1.8.1":   cosem("1-0:1.8.1", mm("00001.001", "kWh")),
					"1-0:1.8.2":   cosem("1-0:1.8.2", mm("00001.001", "kWh")),
					"1-0:2.8.1":   cosem("1-0:2.8.1", mm("00001.001", "kWh")),
					"1-0:2.8.2":   cosem("1-0:2.8.2", mm("00001.001", "kWh")),
					"0-0:96.14.0": cosem("0-0:96.14.0", txt("0001")),
					"1-0:1.7.0":   cosem("1-0:1.7.0", mm("0001.01", "kW")),
					"1-0:2.7.0":   cosem("1-0:2.7.0", mm("0000.00", "kW")),
					"0-0:17.0.0":  cosem("0-0:17.0.0", mm("0999.00", "kW")),
					"0-0:96.3.10": cosem("0-0:96.3.10", txt("1")),
					"0-0:96.13.1": cosem("0-0:96.13.1"),
					"0-0:96.13.0": cosem("0-0:96.13.0"),
					"0-1:24.1.0":  cosem("0-1:24.1.0", txt("3")),
					"0-1:96.1.0":  cosem("0-1:96.1.0", txt("000000000000")),
					"0-1:24.3.0":  cosem("0-1:24.3.0", txt("161107190000"), txt("00"), txt("60"), txt("1"), obis("0-1:24.2.1"), txt("m3"), txt("00001.001")),
					"0-1:24.4.0":  cosem("0-1:24.4.0", txt("1")),
				},
			},
		},
		{
			name: "v3.0",
			telegram: "" +
				"/ISk5\\2MT382-1000\r\n" +
				"\r\n" +
				"0-0:96.1.1(4B384547303034303436333935353037)\r\n" +
				"1-0:1.8.1(12345.678*kWh)\r\n" +
				"1-0:1.8.2(12345.678*kWh)\r\n" +
				"1-0:2.8.1(12345.678*kWh)\r\n" +
				"1-0:2.8.2(12345.678*kWh)\r\n" +
				"0-0:96.14.0(0002)\r\n" +
				"1-0:1.7.0(001.19*kW)\r\n" +
				"1-0:2.7.0(000.00*kW)\r\n" +
				"0-0:17.0.0(016*A)\r\n" +
				"0-0:96.3.10(1)\r\n" +
				"0-0:96.13.1(303132333435363738)\r\n" +
				"0-0:96.13.0(303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E" +
				"3F303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E3F30313233" +
				"3435363738393A3B3C3D3E3F)\r\n" +
				"0-1:96.1.0(3232323241424344313233343536373839)\r\n" +
				"0-1:24.1.0(03)\r\n" +
				"0-1:24.3.0(090212160000)(00)(60)(1)(0-1:24.2.1)(m3)\r\n" +
				"(00001.001)\r\n" +
				"0-1:24.4.0(1)\r\n" +
				"!\r\n",
			expected: &Telegram{
				header: "ISk5\\2MT382-1000",
				cosem: map[string]*COSEM{
					"0-0:96.1.1":  cosem("0-0:96.1.1", txt("4B384547303034303436333935353037")),
					"1-0:1.8.1":   cosem("1-0:1.8.1", mm("12345.678", "kWh")),
					"1-0:1.8.2":   cosem("1-0:1.8.2", mm("12345.678", "kWh")),
					"1-0:2.8.1":   cosem("1-0:2.8.1", mm("12345.678", "kWh")),
					"1-0:2.8.2":   cosem("1-0:2.8.2", mm("12345.678", "kWh")),
					"0-0:96.14.0": cosem("0-0:96.14.0", txt("0002")),
					"1-0:1.7.0":   cosem("1-0:1.7.0", mm("001.19", "kW")),
					"1-0:2.7.0":   cosem("1-0:2.7.0", mm("000.00", "kW")),
					"0-0:17.0.0":  cosem("0-0:17.0.0", mm("016", "A")),
					"0-0:96.3.10": cosem("0-0:96.3.10", txt("1")),
					"0-0:96.13.1": cosem("0-0:96.13.1", txt("303132333435363738")),
					"0-0:96.13.0": cosem("0-0:96.13.0", txt("303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E3F303132333435363738393A3B3C3D3E3F")),
					"0-1:96.1.0":  cosem("0-1:96.1.0", txt("3232323241424344313233343536373839")),
					"0-1:24.1.0":  cosem("0-1:24.1.0", txt("03")),
					"0-1:24.3.0":  cosem("0-1:24.3.0", txt("090212160000"), txt("00"), txt("60"), txt("1"), obis("0-1:24.2.1"), txt("m3"), txt("00001.001")),
					"0-1:24.4.0":  cosem("0-1:24.4.0", txt("1")),
				},
			},
		},
		{
			name: "v4.2",
			telegram: "" +
				"/KFM5KAIFA-METER\r\n" +
				"\r\n" +
				"1-3:0.2.8(42)\r\n" +
				"0-0:1.0.0(161113205757W)\r\n" +
				"0-0:96.1.1(3960221976967177082151037881335713)\r\n" +
				"1-0:1.8.1(001581.123*kWh)\r\n" +
				"1-0:1.8.2(001435.706*kWh)\r\n" +
				"1-0:2.8.1(000000.000*kWh)\r\n" +
				"1-0:2.8.2(000000.000*kWh)\r\n" +
				"0-0:96.14.0(0002)\r\n" +
				"1-0:1.7.0(02.027*kW)\r\n" +
				"1-0:2.7.0(00.000*kW)\r\n" +
				"0-0:96.7.21(00015)\r\n" +
				"0-0:96.7.9(00007)\r\n" +
				"1-0:99.97.0(3)(0-0:96.7.19)(000104180320W)(0000237126*s)(000101000001W)" +
				"(2147583646*s)(000102000003W)(2317482647*s)\r\n" +
				"1-0:32.32.0(00000)\r\n" +
				"1-0:52.32.0(00000)\r\n" +
				"1-0:72.32.0(00000)\r\n" +
				"1-0:32.36.0(00000)\r\n" +
				"1-0:52.36.0(00000)\r\n" +
				"1-0:72.36.0(00000)\r\n" +
				"0-0:96.13.1()\r\n" +
				"0-0:96.13.0()\r\n" +
				"1-0:31.7.0(000*A)\r\n" +
				"1-0:51.7.0(006*A)\r\n" +
				"1-0:71.7.0(002*A)\r\n" +
				"1-0:21.7.0(00.170*kW)\r\n" +
				"1-0:22.7.0(00.000*kW)\r\n" +
				"1-0:41.7.0(01.247*kW)\r\n" +
				"1-0:42.7.0(00.000*kW)\r\n" +
				"1-0:61.7.0(00.209*kW)\r\n" +
				"1-0:62.7.0(00.000*kW)\r\n" +
				"0-1:24.1.0(003)\r\n" +
				"0-1:96.1.0(4819243993373755377509728609491464)\r\n" +
				"0-1:24.2.1(161129200000W)(00981.443*m3)\r\n" +
				"!6796\r\n",
			expected: &Telegram{
				header: "KFM5KAIFA-METER",
				cosem: map[string]*COSEM{
					"1-3:0.2.8":   cosem("1-3:0.2.8", txt("42")),
					"0-0:1.0.0":   cosem("0-0:1.0.0", ts("161113205757")),
					"0-0:96.1.1":  cosem("0-0:96.1.1", txt("3960221976967177082151037881335713")),
					"1-0:1.8.1":   cosem("1-0:1.8.1", mm("001581.123", "kWh")),
					"1-0:1.8.2":   cosem("1-0:1.8.2", mm("001435.706", "kWh")),
					"1-0:2.8.1":   cosem("1-0:2.8.1", mm("000000.000", "kWh")),
					"1-0:2.8.2":   cosem("1-0:2.8.2", mm("000000.000", "kWh")),
					"0-0:96.14.0": cosem("0-0:96.14.0", txt("0002")),
					"1-0:1.7.0":   cosem("1-0:1.7.0", mm("02.027", "kW")),
					"1-0:2.7.0":   cosem("1-0:2.7.0", mm("00.000", "kW")),
					"0-0:96.7.21": cosem("0-0:96.7.21", txt("00015")),
					"0-0:96.7.9":  cosem("0-0:96.7.9", txt("00007")),
					"1-0:99.97.0": cosem("1-0:99.97.0", txt("3"), obis("0-0:96.7.19"), ts("000104180320"), mm("0000237126", "s"), ts("000101000001"), mm("2147583646", "s"), ts("000102000003"), mm("2317482647", "s")),
					"1-0:32.32.0": cosem("1-0:32.32.0", txt("00000")),
					"1-0:52.32.0": cosem("1-0:52.32.0", txt("00000")),
					"1-0:72.32.0": cosem("1-0:72.32.0", txt("00000")),
					"1-0:32.36.0": cosem("1-0:32.36.0", txt("00000")),
					"1-0:52.36.0": cosem("1-0:52.36.0", txt("00000")),
					"1-0:72.36.0": cosem("1-0:72.36.0", txt("00000")),
					"0-0:96.13.1": cosem("0-0:96.13.1"),
					"0-0:96.13.0": cosem("0-0:96.13.0"),
					"1-0:31.7.0":  cosem("1-0:31.7.0", mm("000", "A")),
					"1-0:51.7.0":  cosem("1-0:51.7.0", mm("006", "A")),
					"1-0:71.7.0":  cosem("1-0:71.7.0", mm("002", "A")),
					"1-0:21.7.0":  cosem("1-0:21.7.0", mm("00.170", "kW")),
					"1-0:22.7.0":  cosem("1-0:22.7.0", mm("00.000", "kW")),
					"1-0:41.7.0":  cosem("1-0:41.7.0", mm("01.247", "kW")),
					"1-0:42.7.0":  cosem("1-0:42.7.0", mm("00.000", "kW")),
					"1-0:61.7.0":  cosem("1-0:61.7.0", mm("00.209", "kW")),
					"1-0:62.7.0":  cosem("1-0:62.7.0", mm("00.000", "kW")),
					"0-1:24.1.0":  cosem("0-1:24.1.0", txt("003")),
					"0-1:96.1.0":  cosem("0-1:96.1.0", txt("4819243993373755377509728609491464")),
					"0-1:24.2.1":  cosem("0-1:24.2.1", ts("161129200000"), mm("00981.443", "m3")),
				},
				checksum: "6796",
			},
		},
		{
			name: "v5.0",
			telegram: "" +
				"/ISk5\\2MT382-1000\r\n" +
				"\r\n" +
				"1-3:0.2.8(50)\r\n" +
				"0-0:1.0.0(170102192002W)\r\n" +
				"0-0:96.1.1(4B384547303034303436333935353037)\r\n" +
				"1-0:1.8.1(000004.426*kWh)\r\n" +
				"1-0:1.8.2(000002.399*kWh)\r\n" +
				"1-0:2.8.1(000002.444*kWh)\r\n" +
				"1-0:2.8.2(000000.000*kWh)\r\n" +
				"0-0:96.14.0(0002)\r\n" +
				"1-0:1.7.0(00.244*kW)\r\n" +
				"1-0:2.7.0(00.000*kW)\r\n" +
				"0-0:96.7.21(00013)\r\n" +
				"0-0:96.7.9(00000)\r\n" +
				"1-0:99.97.0(0)(0-0:96.7.19)\r\n" +
				"1-0:32.32.0(00000)\r\n" +
				"1-0:52.32.0(00000)\r\n" +
				"1-0:72.32.0(00000)\r\n" +
				"1-0:32.36.0(00000)\r\n" +
				"1-0:52.36.0(00000)\r\n" +
				"1-0:72.36.0(00000)\r\n" +
				"0-0:96.13.0()\r\n" +
				"1-0:32.7.0(0230.0*V)\r\n" +
				"1-0:52.7.0(0230.0*V)\r\n" +
				"1-0:72.7.0(0229.0*V)\r\n" +
				"1-0:31.7.0(0.48*A)\r\n" +
				"1-0:51.7.0(0.44*A)\r\n" +
				"1-0:71.7.0(0.86*A)\r\n" +
				"1-0:21.7.0(00.070*kW)\r\n" +
				"1-0:41.7.0(00.032*kW)\r\n" +
				"1-0:61.7.0(00.142*kW)\r\n" +
				"1-0:22.7.0(00.000*kW)\r\n" +
				"1-0:42.7.0(00.000*kW)\r\n" +
				"1-0:62.7.0(00.000*kW)\r\n" +
				"0-1:24.1.0(003)\r\n" +
				"0-1:96.1.0(3232323241424344313233343536373839)\r\n" +
				"0-1:24.2.1(170102161005W)(00000.107*m3)\r\n" +
				"0-2:24.1.0(003)\r\n" +
				"0-2:96.1.0()\r\n" +
				"!6EEE\r\n",
			expected: &Telegram{
				header: "ISk5\\2MT382-1000",
				cosem: map[string]*COSEM{
					"1-3:0.2.8":   cosem("1-3:0.2.8", txt("50")),
					"0-0:1.0.0":   cosem("0-0:1.0.0", ts("170102192002")),
					"0-0:96.1.1":  cosem("0-0:96.1.1", txt("4B384547303034303436333935353037")),
					"1-0:1.8.1":   cosem("1-0:1.8.1", mm("000004.426", "kWh")),
					"1-0:1.8.2":   cosem("1-0:1.8.2", mm("000002.399", "kWh")),
					"1-0:2.8.1":   cosem("1-0:2.8.1", mm("000002.444", "kWh")),
					"1-0:2.8.2":   cosem("1-0:2.8.2", mm("000000.000", "kWh")),
					"0-0:96.14.0": cosem("0-0:96.14.0", txt("0002")),
					"1-0:1.7.0":   cosem("1-0:1.7.0", mm("00.244", "kW")),
					"1-0:2.7.0":   cosem("1-0:2.7.0", mm("00.000", "kW")),
					"0-0:96.7.21": cosem("0-0:96.7.21", txt("00013")),
					"0-0:96.7.9":  cosem("0-0:96.7.9", txt("00000")),
					"1-0:99.97.0": cosem("1-0:99.97.0", txt("0"), obis("0-0:96.7.19")),
					"1-0:32.32.0": cosem("1-0:32.32.0", txt("00000")),
					"1-0:52.32.0": cosem("1-0:52.32.0", txt("00000")),
					"1-0:72.32.0": cosem("1-0:72.32.0", txt("00000")),
					"1-0:32.36.0": cosem("1-0:32.36.0", txt("00000")),
					"1-0:52.36.0": cosem("1-0:52.36.0", txt("00000")),
					"1-0:72.36.0": cosem("1-0:72.36.0", txt("00000")),
					"0-0:96.13.0": cosem("0-0:96.13.0"),
					"1-0:32.7.0":  cosem("1-0:32.7.0", mm("0230.0", "V")),
					"1-0:52.7.0":  cosem("1-0:52.7.0", mm("0230.0", "V")),
					"1-0:72.7.0":  cosem("1-0:72.7.0", mm("0229.0", "V")),
					"1-0:31.7.0":  cosem("1-0:31.7.0", mm("0.48", "A")),
					"1-0:51.7.0":  cosem("1-0:51.7.0", mm("0.44", "A")),
					"1-0:71.7.0":  cosem("1-0:71.7.0", mm("0.86", "A")),
					"1-0:21.7.0":  cosem("1-0:21.7.0", mm("00.070", "kW")),
					"1-0:41.7.0":  cosem("1-0:41.7.0", mm("00.032", "kW")),
					"1-0:61.7.0":  cosem("1-0:61.7.0", mm("00.142", "kW")),
					"1-0:22.7.0":  cosem("1-0:22.7.0", mm("00.000", "kW")),
					"1-0:42.7.0":  cosem("1-0:42.7.0", mm("00.000", "kW")),
					"1-0:62.7.0":  cosem("1-0:62.7.0", mm("00.000", "kW")),
					"0-1:24.1.0":  cosem("0-1:24.1.0", txt("003")),
					"0-1:96.1.0":  cosem("0-1:96.1.0", txt("3232323241424344313233343536373839")),
					"0-1:24.2.1":  cosem("0-1:24.2.1", ts("170102161005"), mm("00000.107", "m3")),
					"0-2:24.1.0":  cosem("0-2:24.1.0", txt("003")),
					"0-2:96.1.0":  cosem("0-2:96.1.0"),
				},
				checksum: "6EEE",
			},
		},
		{
			name:     "InvalidTelegram",
			telegram: "invalid_telegram",
			fail:     "\nparse error near Unknown (line 1 symbol 1 - line 1 symbol 1):\n\"\"\n",
		},
		{
			name: "InvalidMeasurement",
			telegram: "" +
				"/foo\r\n" +
				"\r\n" +
				"0-0:0.0.0(0.0..0*bar)\r\n" +
				"!\r\n",
			fail: "can't convert 0.0..0 to decimal: too many .s",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ast, err := ParseString(test.telegram)
			if test.fail != "" {
				assert.EqualError(t, err, test.fail)
			} else {
				assert.NoError(t, err)
				assert.Equal(t,
					repr.String(test.expected, repr.Indent("  ")),
					repr.String(ast, repr.Indent("  ")))
			}
		})
	}

}

func cosem(v string, a ...Attribute) *COSEM {
	return &COSEM{obis(v), a}
}

func obis(v string) *OBIS {
	return &OBIS{v}
}

func mm(v string, u string) *Measurement {
	return &Measurement{decimal.RequireFromString(v), u}
}

func ts(v string) *Timestamp {
	tz, _ := time.LoadLocation("Europe/Amsterdam")
	t, _ := time.ParseInLocation("060102150405", v, tz)

	return &Timestamp{t.UTC()}
}

func txt(v string) *Text {
	return &Text{v}
}
